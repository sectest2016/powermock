def modules = allprojects - project(":powermock-api")  - project(":powermock-classloading") - project(":powermock-modules") - project(":tests") - project(":tests:easymock")

configure(modules){project ->
    repositories {
        mavenCentral()
    }

    group = "org.powermock"

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: "java"

    apply from: "${gradleScriptDir}/publish-maven.gradle"

    configurations {
        mockito2
    }

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    compileTestJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    tasks.withType(JavaCompile) {
        options.warnings = false
    }

    jar {
        manifest.attributes["Created-By"] =
                "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.name
        manifest.attributes["Implementation-Version"] = project.version

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.addStringOption('-quiet')

        failOnError = false

        // Suppress warnings due to cross-module @see and @link references.
        // Note that global 'api' task does display all warnings.
        //logging.captureStandardError LogLevel.INFO
        //logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}